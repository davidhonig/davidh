# frozen_string_literal: true

# -*- mode: ruby -*-
# vi: set ft=ruby :

ANSIBLE_PATH = '../'
ANSIBLE_HOSTGROUPS = 'dev'
IP_ADDRESS = '192.168.33.11'

require "#{ANSIBLE_PATH}../lib/ansible_inventory"

# Vagrant plugins dependencies
required_plugins = %w[vagrant-triggers vagrant-aws]
required_plugins.each do |plugin|
  exec "vagrant plugin install #{plugin};vagrant #{ARGV.join(' ')}" unless Vagrant.has_plugin? plugin || ARGV[0] == 'plugin'
end

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure('2') do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = 'debian/jessie64'
  config.vm.hostname = 'jessie'

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network 'private_network', ip: IP_ADDRESS

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider 'virtualbox' do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = false

    # Customize the amount of memory on the VM:
    vb.memory = '512'
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.

  # id_rsa_ssh_key = File.read(File.join(Dir.home, ".ssh", "id_rsa"))
  id_rsa_ssh_key_pub = 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAx/qrkD4bdSGWr8LMpkoM4TFvvVx6h3woUlXbTtGTyu9cFKVo2zfvUQjaWi1lips09El5PC3D7wx7PMygG0WZERcle5N8gtZ747dp5r9HrFc3iOfeBxSFyC4UtVuSfgKbTASpywoC8CHLHAY4Ebig/lE6ilmU5hxyZqRxVZLz2KsmlnMlIzuoGzb0bFYeXrX5esym1RyWDMjcT9ynpCWZ5RQaBSxwp0VZDX7iui0CeUMM+JNeSj+vyStxZR54SPqrg88VgqzqwZlYj+5rbLx+7Z4QNu6BcdxhEQqaq5Sdt51RSD4i/H1QEGhNPeaLCP1L2P2im2lfxbmQTeA+92b6Ww== david@honig.cz'
  id_rsa_ssh_key_ansible = id_rsa_ssh_key_pub

  # puts config.vm.network("private_network")[:ip]

  config.vm.provision 'shell', inline: <<-SHELL
    apt-get update
    apt-get -y install software-properties-common
    add-apt-repository "deb http://ppa.launchpad.net/ansible/ansible/ubuntu trusty main"
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 93C4A3FD7BB9C367
    apt-get -y install ansible
  SHELL

  config.vm.provision 'shell', inline: <<-SHELL
    # add fixed key to machine
    echo "adding local user access key to authorized keys" && echo '#{id_rsa_ssh_key_pub}' >> /home/vagrant/.ssh/authorized_keys && chmod 600 /home/vagrant/.ssh/authorized_keys
    # adding ansible root key
    echo "adding local user access key to authorized keys" && sudo -- sh -c 'mkdir /root/.ssh && echo #{id_rsa_ssh_key_ansible} >> /root/.ssh/authorized_keys && chmod -R 600 /root/.ssh'
    # display internal ip address
    echo `ip a | grep -w inet | grep -v "127.0.0.1"`
  SHELL

  # config.vm.provision "ansible" do |ansible|
  #   ansible.verbose = "v"
  #   ansible.playbook = "playbook.yml"
  # end

  inventory_add_host(ANSIBLE_INVENTORY, IP_ADDRESS, ANSIBLE_HOSTGROUPS)

  config.trigger.after :destroy do
    info 'Removing server from ansible inventory'
    inventory_del_host(ANSIBLE_INVENTORY, IP_ADDRESS)
  end
end
